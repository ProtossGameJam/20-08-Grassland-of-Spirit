<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>battleState := 0;
battleSubstate := 0;
// 0/0: 정령 선택 (다음에 내 턴)
// 0/1: 정령 선택 (다음에 상대 턴)
// 1/0: 내 턴
// 1/1: 내 턴 (계약 불가; 체력이 너무 많음)
// 1/2: 내 턴 (계약 불가; 정령이 너무 많음)
// 2/0: 정령 소환 중 (다음에 내 턴)
// 2/1: 정령 소환 중 (다음에 상대 턴)
// 3/-1: 내가 계약 시도 중
// 3/0: 내가 공격 중
// 3/1: 내가 스킬 사용 중
// 3/2: 상대가 공격 중
// 3/3: 상대가 스킬 사용 중
// 4/-1: 패배
// 4/0: 도망
// 4/1: 승리
// 4/2: 계약 성공

spiritNo := 0;
spiritCancel := 0;
option := 0;
// 0: 일반 공격
// 1: 스킬 사용
// 2: 정령 교환
// 3: 계약
// 4: 도망

win := 0;
// -1: 패배
// 0: 도망
// 1: 승리
// 2: 계약 성공

player := oPlayer.id;
event_user(0);
spiritType := -1;
spiritSkill := 0;
enemyType := x.image_single;
enemyName := x.name;
enemyLvl := x.lvl;
enemyHp := eval_hp_raw(enemyLvl, x.hpMp, 0);
enemyMaxHp := enemyHp;
enemyAtk := eval_atk_raw(enemyLvl, x.atkMp, 0);
enemyDef := eval_def_raw(enemyLvl, x.defMp, 0);

playerX := player.x;
playerY := player.y;
spiritAnim := 0;
spiritDisplayType := -1;
enemyX := x.x;
enemyY := x.y;
enemyAnim := 90;
spiritSelAnim := 0;
optionAnim := 0;
spellAnim := 0;
tableAlpha := 0;

instance_deactivate_object(oXP);
instance_deactivate_object(oMonster);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var myTurn := false, enemyTurn := false;

switch(battleState) {
   case 2: // summoning
      if(battleSubstate == 1) // give turn?
         enemyTurn = true;
      else
         myTurn = true;
   break;
   case 3: // attack
      if(battleSubstate &gt;= 2) // attacked
         if(spiritHp == 0) { // dead?
            with(player) {
               _arg_spirit_to_remove = other.spiritNo;
               event_user(1);
            }
            spiritType = -1;
            if(player.spirits == 0) { // no spirits?
               battleState = 4;
               battleSubstate = -1;
            } else {
               battleState = 0;
               battleSubstate = 0;
               spiritNo = 0;
               event_user(0);
            }
         } else // alive?
            myTurn = true;
      else if(battleSubstate == -1) // contracting
         if(random(1) &lt; 1 - 3*enemyHp/enemyMaxHp) { // succeeded?
            battleState = 4;
            battleSubstate = 2;
         } else
            enemyTurn = true;
      else if(enemyHp == 0) { // enemy dead?
         battleState = 4;
         battleSubstate = 1;
      } else
         enemyTurn = true;
   break;
}

if(myTurn) {
   battleState = 1;
   battleSubstate = 0;
   option = 0;
}
if(enemyTurn) {
   battleState = 3;
   battleSubstate = 2;
   spellAnim = choose(-1, 1)*random_range(3/4, 3/2);
   alarm[0] = 180;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var
   inX := keyboard_check_pressed(vk_right) - keyboard_check_pressed(vk_left),
   inY := keyboard_check_pressed(vk_down) - keyboard_check_pressed(vk_up),
   okay := keyboard_check_pressed(vk_enter),
   cancel := keyboard_check_pressed(vk_escape),
   sp, confirm := false;

switch(battleState) {
   case 0:
      spiritNo = clamp(spiritNo + inX, 0, player.spirits - 1);
      if(inX != 0)
         event_user(0);
      if(battleSubstate == 1 &amp;&amp; cancel) {
         battleState = 1;
         battleSubstate = 0;
         spiritNo = spiritCancel;
         confirm = true;
      } else if(okay) {
         battleState = 2;
         alarm[0] = 180;
         confirm = true;
      }
      if(confirm) {
         sp = player.spirit[spiritNo];
         event_user(0);
         spiritType = sp[? 'type'];
         spiritSkill = sp[? 'skill'];
         spiritAnim = 0;
         spiritDisplayType = spiritType;
      }
   break;
   case 1:
      option = clamp(option + inY, 0, 3);
      if(okay) {
         switch(option) {
            case 0:
               battleState = 3;
               battleSubstate = option;
               spellAnim = choose(-1, 1)*random_range(3/4, 3/2);
               alarm[0] = 180;
            break;
            case 1:
               battleState = 0;
               battleSubstate = 1;
               spiritType = -1;
               spiritCancel = spiritNo;
               event_user(0);
            break;
            case 2:
               if(player.spirits == 16)
                  battleSubstate = 2;
               else if(3*enemyHp &gt;= enemyMaxHp)
                  battleSubstate = 1;
               else {
                  battleState = 3;
                  battleSubstate = -1;
                  spellAnim = choose(-1, 1)*random_range(3/4, 3/2);
                  alarm[0] = 180;
               }
            break;
            case 3:
               battleState = 4;
               battleSubstate = 0;
               spiritType = -1;
            break;
         }
      }
   break;
   case 4:
      if(okay) {
         instance_activate_all();
         if(battleSubstate &gt;= 1)
            x.regen = 1;
         else with(player)
            event_user(2);
         with(player)
            switch(other.battleSubstate) {
               case -1:
                  event_user(3);
               break;
               case 1:
                  _arg_xp_gain = round(other.x.xpMp*query(oDB.level, 1040000 + other.enemyLvl, 1)/3);
                  _arg_xp_from_battle = true;
                  event_user(0);
               break;
               case 2:
                  sp = ds_map_create();
                  sp[? 'name'] = other.enemyName;
                  sp[? 'type'] = other.enemyType;
                  sp[? 'lvl'] = other.enemyLvl;
                  sp[? 'hpMp'] = other.x.hpMp;
                  sp[? 'atkMp'] = other.x.atkMp;
                  sp[? 'defMp'] = other.x.defMp;
                  sp[? 'hp'] = other.enemyHp;
                  sp[? 'maxHp'] = eval_hp(sp, hpBonus);
                  sp[? 'atk'] = eval_atk(sp, atkBonus);
                  sp[? 'def'] = eval_def(sp, defBonus);
                  sp[? 'xpNext'] = query(oDB.level, 1040000 + sp[? 'lvl'], 1);
                  sp[? 'xp'] = irandom(sp[? 'xpNext'] - 1);
                  sp[? 'skill'] = undefined;
                  spirit[spirits++] = sp;
               break;
            }
         player.enterBattle = false;
         player.fadeAnim = 20;
         if(battleSubstate &gt;= 1)
            instance_create(0, 0, oReroll);
         instance_destroy(oDamage);
         instance_destroy();
      }
   break;
}

if(alarm[0] == 60 &amp;&amp; battleState == 3) {
   var strong := 0, rmp := random_range(0.9, 1.1), dmg;
   if(spiritType != 0 &amp;&amp; enemyType != 0)
      switch((spiritType - enemyType)%4) {
         case 1:
            strong = 1;
         break;
         case 3:
            strong = -1;
         break;
      }
   
   switch(battleSubstate) {
      case 0: case 1:
         dmg := max(1, max(
            1, round(rmp*(1 + 0.2*strong)*(spiritAtk - enemyDef))
         ));
         enemyHp = max(0, enemyHp - dmg);
         enemyX += 24*(1 - exp(-dmg/8));
         with(instance_create(enemyX + random_range(-25, 25), enemyY - random_range(25, 75), oDamage))
            self.dmg = dmg;
      break;
      case 2: case 3:
         dmg := max(1, max(
            1, round(rmp*(1 - 0.2*strong)*(enemyAtk - spiritDef))
         ));
         spiritHp = max(0, spiritHp - dmg);
         playerX -= 24*(1 - exp(-dmg/8));
         sp = player.spirit[spiritNo];
         sp[? 'hp'] = spiritHp;
         with(instance_create(playerX + random_range(-25, 25), playerY - random_range(25, 75), oDamage))
            self.dmg = dmg;
      break;
   }
}

if(spiritType == -1)
   spiritAnim = max(0, --spiritAnim);
else
   spiritAnim = min(90, ++spiritAnim);
if(battleState == 4 &amp;&amp; battleSubstate &gt;= 1)
   enemyAnim = max(60, --enemyAnim);
if(battleState == 0)
   spiritSelAnim = min(15, ++spiritSelAnim);
else
   spiritSelAnim = max(0, --spiritSelAnim);
if(battleState == 1)
   optionAnim = min(15, ++optionAnim);
else
   optionAnim = max(0, --optionAnim);
playerX += (view_xview + view_wview/4 - playerX)/12;
playerY += (view_yview + view_hview/2 + 20 - playerY)/12;
enemyX += (view_xview + view_wview*3/4 - enemyX)/12;
enemyY += (view_yview + view_hview/2 + 20 - enemyY)/12;
tableAlpha = min(1, tableAlpha + 1/20);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///event_user(0): update spirit data

var sp := player.spirit[spiritNo];
spiritName = sp[? 'name'];
spiritLvl = sp[? 'lvl'];
spiritHp = sp[? 'hp'];
spiritMaxHp = sp[? 'maxHp'];
spiritAtk = sp[? 'atk'];
spiritDef = sp[? 'def'];
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var sp;

draw_set_font(fMain);
draw_set_halign(fa_center);
draw_set_valign(fa_top);
if(spiritSelAnim != 0) {
   var yoff := -16*sqr(spiritSelAnim/15 - 1), alpha := spiritSelAnim/15;
   for(var i := -2; i &lt; 3; i++) {
      if(spiritNo + i &lt; 0 || spiritNo + i &gt;= player.spirits)
         continue;
      
      var offset := 8*sign(i), scale := (3 + (i == 0))/4;
      sp = player.spirit[spiritNo + i];
      draw_sprite_ext(
         sTypes, sp[? 'type'],
         view_wview/4 + 28*i + offset, view_hview/2 + 40 + yoff,
         scale, scale, 0,
         $ffffff, alpha*(1 + (abs(i) != 2))/2
      );
   }
   draw_set_alpha(alpha);
   draw_text_shadow(
      view_wview/4, view_hview/2 + 60 + yoff,
      spiritName + ' Lv.' + string(spiritLvl),
      $ffffff
   );
   draw_text_shadow(
      view_wview/4, view_hview/2 + 80 + yoff,
      string(spiritHp) + '/' + string(spiritMaxHp),
      hp_colour(spiritHp, spiritMaxHp, false)
   );
   draw_text_shadow(
      view_wview/4, view_hview/2 + 100 + yoff,
      'ATK ' + string(spiritAtk) + ', DEF ' + string(spiritDef),
      $ffffff
   );
}
if(optionAnim != 0) {
   var
      yoff := -16*sqr(optionAnim/15 - 1), alpha := optionAnim/15,
      optionText;
   optionText[3] = '도망';
   optionText[2] = '계약';
   optionText[1] = '정령 교체';
   optionText[0] = '공격';
   
   draw_set_alpha(alpha);
   for(var i := 0; i &lt; 4; i++) {
      var col := $c0c0c0;
      if(i == option)
         col = $80ffff;
      if(i == 2 &amp;&amp; 3*enemyHp &lt; enemyMaxHp) {
         col = $e0e080;
         if(i == option)
            col = $ffff00;
      }
      draw_text_shadow(view_wview/4, view_hview/2 + 20*i + 56 + yoff, optionText[i], col);
   }
}

draw_set_alpha(1);
if(spiritType != -1)
   draw_text_shadow(
      view_wview/4, view_hview/2 + 30,
      string(spiritHp) + '/' + string(spiritMaxHp),
      hp_colour(spiritHp, spiritMaxHp, false)
   );
if(battleState != 4 || battleSubstate &lt; 1)
   draw_text_shadow(
      view_wview*3/4, view_hview/2 + 30,
      string(enemyHp) + '/' + string(enemyMaxHp),
      hp_colour(enemyHp, enemyMaxHp, true)
   );

draw_sprite_ext(
   sTypeTable, 0,
   view_wview - 16, 16,
   1, 1, 0,
   $ffffff, tableAlpha
);

draw_primitive_begin(pr_trianglestrip);
draw_vertex_colour(0, view_hview*5/6, $000000, 0);
draw_vertex_colour(view_wview, view_hview*5/6, $000000, 0);
draw_vertex_colour(0, view_hview, $000000, 1);
draw_vertex_colour(view_wview, view_hview, $000000, 1);
draw_primitive_end();

var text;
draw_set_valign(fa_middle);

switch(battleState) {
   case 0:
      text = '무슨 정령을 소환할까?';
   break;
   case 1:
      switch(battleSubstate) {
         case 0:
            text = spiritName + '에게 무엇을 시킬까?';
         break;
         case 1:
            text = '아직 계약을 시도할 수 없다. 조금만 더 공격해보자.';
         break;
         case 2:
            text = '정령이 너무 많아 더 이상 계약할 수 없다.';
         break;
      }
   break;
   case 2:
      text = string_eul(spiritName) + ' 소환했다!';
   break;
   case 3:
      switch(battleSubstate) {
         case -1:
            text = enemyName + '에게 계약을 시도했다...';
         break;
         case 0: case 1:
            text = string_i(spiritName) + ' ' + string_eul(enemyName) + ' 공격했다!';
         break;
         case 2: case 3:
            text = string_i(enemyName) + ' ' + string_eul(spiritName) + ' 공격했다!';
         break;
      }
   break;
   case 4:
      switch(battleSubstate) {
         case -1:
            text = enemyName + '에게 패배했다...';
         break;
         case 0:
            text = enemyName + '에게서 도망갔다...';
         break;
         case 1:
            text = string_eul(enemyName) + ' 처치했다!';
         break;
         case 2:
            text = string_gwa(enemyName) + ' 계약을 맺었다!';
         break;
      }
   break;
}
draw_text_shadow(view_wview/2, view_hview*11/12, text, $ffffff);

var input := '';
draw_set_halign(fa_right);
draw_set_valign(fa_bottom);
switch(battleState) {
   case 0:
      input = '선택 [←] [→]#결정 [Enter]';
      if(battleSubstate == 1)
         input += '#취소 [Esc]';
   break;
   case 1:
      input = '선택 [↑] [↓]#결정 [Enter]';
   break;
   case 4:
      input = '확인 [Enter]';
   break;
}
draw_text_shadow(view_wview - 8, view_hview - 8, input, $ffffff);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var scale := 0, alpha := 0;
if(battleState == 3 &amp;&amp; battleSubstate &gt;= 2) {
   var t := 3 - alarm[0]/60;
   switch(floor(t)) {
      case 0:
         scale = 1 - 0.2*sqr(1 - t);
         alpha = 0.8*t;
      break;
      case 1:
         scale = 1;
         alpha = 0.8;
      break;
      case 2:
         if(t &lt; 2.25) {
            scale = 2*t - 3;
            alpha = 3.2*(2.25 - t);
         } else
            alpha = 0;
      break;
   }
   draw_sprite_ext(
      sSpell, enemyType,
      playerX, playerY - 42.5,
      scale, scale, image_index*spellAnim, $ffffff, alpha
   );
}
if(spiritAnim &lt; 30) {
   scale = 1 - sqr(spiritAnim/30)/5;
   alpha = 1 - spiritAnim/30;
   draw_sprite_ext(
      sPlayerRight, 1,
      playerX, playerY,
      scale, scale, 0, $ffffff, alpha
   );
} else if(spiritAnim &gt; 60) {
   scale = 1 - sqr(spiritAnim/30 - 3)/5;
   alpha = spiritAnim/30 - 2;
   draw_sprite_ext(
      sSpiritRight, spiritDisplayType,
      playerX, playerY,
      scale, scale, 0, $ffffff, alpha
   );
}

if(battleState == 3 &amp;&amp; battleSubstate &lt;= 1) {
   var t := 3 - alarm[0]/60;
   switch(floor(t)) {
      case 0:
         scale = 1 - 0.2*sqr(1 - t);
         alpha = 0.8*t;
      break;
      case 1:
         scale = 1;
         alpha = 0.8;
      break;
      case 2:
         if(battleSubstate == -1) {
            scale = 1 - 0.2*sqr(t - 2);
            alpha = 0.8*(3 - t);
         } else if(t &lt; 2.25) {
            scale = 2*t - 3;
            alpha = 3.2*(2.25 - t);
         } else
            alpha = 0;
      break;
   }
   draw_sprite_ext(
      sSpell, spiritType,
      enemyX, enemyY - 42.5,
      scale, scale, image_index*spellAnim, $ffffff, alpha
   );
}
if(enemyAnim &gt; 60) {
   scale = 1 - sqr(enemyAnim/30 - 3)/5;
   alpha = enemyAnim/30 - 2;
   draw_sprite_ext(
      sSpiritRight, enemyType,
      enemyX, enemyY,
      -scale, scale, 0, $ffffff, alpha
   );
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
